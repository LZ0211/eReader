"use strict";
function isObject(obj){
    return Object.prototype.toString.call(obj) === '[object Object]'
}

function getType(obj){
    let _obj = {}
    for(let name in obj){
        if(isObject(obj[name])){
            _obj[name] = getType(obj[name])
        }else{
            _obj[name] = typeof obj[name]
        }
    }
    return _obj
}

const EventEmitter = require("events");

class Hash extends EventEmitter{
    constructor(defaults){
        super()
        this.hash = defaults
        this.define = getType(defaults)
        return this
    }
    set(k,v){
        if(v === null || v === undefined) return this
        if('string' !== typeof k) return this
        k = k.toLowerCase()
        if(isObject(v)){
            for(let name in v){
                this.set([k,name].join('.'),v[name])
            }
        }else{
            let arr = k.split('.')
            if(arr.some(name=>name === '')) return this
            let define = this.define
            let hash = this.hash
            while(arr.length){
                let name = arr.shift()
                define = define[name]
                if(undefined == define) return this
                if(!isObject(define) && arr.length){
                    return this
                }
                if(arr.length === 0){
                    if(define === typeof v){
                        if(hash[name] !== v){
                            hash[name] = v
                            this._emit(k)
                        }
                        return this
                    }
                    if('number' === typeof v){//数字
                        if('string' ===define){
                            let s = String(v)
                            if(hash[name] !== s){
                                hash[name] = s
                                this._emit(k)
                            }
                        }else if('boolean' === define){
                            let b = !!v
                            if(hash[name] !== b){
                                hash[name] = b
                                this._emit(k)
                            }
                        }
                    }
                    if('string' === typeof v){//字符串
                        if('number' === define){
                            let n = Number(v)
                            if(!isNaN(n) && hash[k] !== n){
                                hash[name] = n
                                this._emit(k)
                            }
                        }else if('boolean' === define){
                            if(v === 'false' && hash[k] !== false){
                                hash[name] = false
                                this._emit(k)
                            }
                            if(v === 'true' && hash[k] !== true){
                                hash[name] = true
                                this._emit(k)
                            }
                        }
                    }
                }
                let next = hash[name]
                if(next == undefined){
                    hash[name] = {}
                }
                hash = hash[name]
            }
        }
        return this
    }
    _emit(str){
        let arr = str.split('.')
        while(arr.length){
            this.emit(arr.join('.'))
            arr.pop()
        }
    }
    get(str){
        let arr = str.split('.')
        let hash = this.hash
        while(arr.length){
            let name = arr.shift()
            hash = hash[name]
            if(hash == undefined) return hash
        }
        return hash
    }

    stringify(){
        return JSON.stringify(this.hash,null,2)
    }
}

module.exports = Hash